{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"text_classification_with_attention_v3_korean","provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/nlp/ipynb/text_classification_with_transformer.ipynb","timestamp":1622697288061}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"GM2k21JTS0k7"},"source":["# Text classification with Attention\n","- 비윤리적 문장 탐지 어탠션 모델\n","- 컴퓨터공학종합프로젝트2\n","- 전남대학교 컴퓨터정보통신공학 182571 윤현서"]},{"cell_type":"markdown","metadata":{"id":"CJdMqun-S0lb"},"source":["## 1. 환경설정"]},{"cell_type":"markdown","metadata":{"id":"111qU4uQoLJb"},"source":["### 1-1. 라이브러리"]},{"cell_type":"code","metadata":{"id":"gqUout1vWJAQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623048851596,"user_tz":-540,"elapsed":2966,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"05097e01-be5c-41c8-db65-6a7dfcb03b40"},"source":["!pip install sentencepiece"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: sentencepiece in /usr/local/lib/python3.7/dist-packages (0.1.95)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"p4xScYkMS0lc","executionInfo":{"status":"ok","timestamp":1623048851597,"user_tz":-540,"elapsed":6,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","from google.colab import drive\n","import sentencepiece as spm\n","import pandas as pd\n","import numpy as np\n","import os\n","import gzip\n","import shutil"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2wkiLC1tolt8"},"source":["### 1-2. 버전 확인"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xwse5_U6okpb","executionInfo":{"status":"ok","timestamp":1623048468887,"user_tz":-540,"elapsed":6,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"f2cdb04f-f1d6-4ea4-ed61-151bbee646b2"},"source":["print(tf.__version__)\n","print(pd.__version__)\n","print(np.__version__)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2.5.0\n","1.1.5\n","1.19.5\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DUhZfNSnopqa"},"source":["### 1-3. GPU 확인"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kmH3Bd1lorxc","executionInfo":{"status":"ok","timestamp":1623048478224,"user_tz":-540,"elapsed":4876,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"b12c1805-c7f6-4046-ffbe-a8d38caed18b"},"source":["gpus = tf.config.experimental.list_physical_devices('GPU')\n","if gpus:\n","  try:\n","    # Currently, memory growth needs to be the same across GPUs\n","    for gpu in gpus:\n","      tf.config.experimental.set_memory_growth(gpu, True)\n","    logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n","    print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n","  except RuntimeError as e:\n","    # Memory growth must be set before GPUs have been initialized\n","    print(e)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1 Physical GPUs, 1 Logical GPUs\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qDdyUu9zotYj"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HPKE3wH3o_GU"},"source":["## 2. 데이터 전처리"]},{"cell_type":"markdown","metadata":{"id":"oasRQO-IpBNO"},"source":["### 2-1. 데이터 로드"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XRqgMJ4VfWjW","executionInfo":{"status":"ok","timestamp":1623048524152,"user_tz":-540,"elapsed":45939,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"872e73e6-7af3-4d90-d722-c503d712f306"},"source":["drive.mount('/content/drive')\n","# data를 저장할 폴더 입니다. 환경에 맞게 수정 하세요.\n","data_dir = \"/content/drive/My Drive/Capstone2/\""],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r2h2fT6jfgV1","executionInfo":{"status":"ok","timestamp":1623048866482,"user_tz":-540,"elapsed":2716,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"1567ab25-86b4-4f9b-a0b1-69cba0bc565c"},"source":["train = pd.read_csv(data_dir+\"bias_data_train.csv\")\n","test = pd.read_csv(data_dir+\"bias_data_test.csv\")\n","\n","print(train.shape)\n","print(test.shape)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["(50222, 2)\n","(4974, 2)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"As3ivLjXqRVT"},"source":["### 2-2. 데이터 전처리\n","- 문장 인코딩"]},{"cell_type":"code","metadata":{"id":"Ty009i93pK8s","executionInfo":{"status":"ok","timestamp":1623048866875,"user_tz":-540,"elapsed":2,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["def data_preprocessing(train, test):\n","    vocab_file = f\"{data_dir}/kowiki.model\"\n","    vocab = spm.SentencePieceProcessor()\n","    vocab.load(vocab_file)\n","\n","    '''\n","    # 데이터 인코딩 테스트\n","    lines = [\n","        \"겨울이 되어서 날씨가 무척 추워요.\",\n","        \"이번 성탄절은 화이트 크리스마스가 될까요?\",\n","        \"겨울에 감기 조심하시고 행복한 연말 되세요.\"\n","            ]\n","    for line in lines:\n","    pieces = vocab.encode_as_pieces(line)\n","    ids = vocab.encode_as_ids(line)\n","    print(line)\n","    print(pieces)\n","    print(ids)\n","    print()\n","    '''\n","\n","    x_train = train[\"comments\"]\n","    y_train = train[\"label\"]\n","    x_test = test[\"comments\"]\n","    y_test = test[\"label\"]\n","\n","    for l in range(len(x_train)):\n","        x_train[l] = vocab.encode_as_ids(x_train[l])\n","\n","    for l in range(len(x_test)):\n","        x_test[l] = vocab.encode_as_ids(x_test[l])\n","    \n","    y_train = np.asarray(y_train).astype('float32')\n","    y_test = np.asarray(y_test).astype('float32')\n","\n","    return x_train, y_train, x_test, y_test"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-c-8P6gxhIw1","executionInfo":{"status":"ok","timestamp":1623048892504,"user_tz":-540,"elapsed":24084,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"aeba29b8-c36a-48e2-ef61-2c8bf33afbca"},"source":["x_train, y_train, x_test, y_test = data_preprocessing(train, test)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:28: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"HM2TASHNrFsd"},"source":["- 문장 패딩"]},{"cell_type":"code","metadata":{"id":"FFrR4Ityq-Ns","executionInfo":{"status":"ok","timestamp":1623048892504,"user_tz":-540,"elapsed":7,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["vocab_size = 20000  # Only consider the top 20k words\n","maxlen = 200  # Only consider the first 200 words of each movie review"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sv0yZDNpq-Yk","executionInfo":{"status":"ok","timestamp":1623048893022,"user_tz":-540,"elapsed":524,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"54ce8cca-e96e-49be-c6f2-f4faaaefce17"},"source":["print(len(x_train), \"Training sequences\")\n","print(len(x_test), \"Test sequences\")\n","x_train = keras.preprocessing.sequence.pad_sequences(x_train, maxlen=maxlen)\n","x_test = keras.preprocessing.sequence.pad_sequences(x_test, maxlen=maxlen)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["50222 Training sequences\n","4974 Test sequences\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XkNIWJ6gq1zI"},"source":["## 3. 모델"]},{"cell_type":"markdown","metadata":{"id":"J-wNVBv4S0le"},"source":["### 3-1. Attention"]},{"cell_type":"code","metadata":{"id":"LG7ZZANZ0N87","executionInfo":{"status":"ok","timestamp":1623048893023,"user_tz":-540,"elapsed":6,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["from tensorflow.keras import backend as K\n","from tensorflow.keras import initializers, regularizers, constraints, optimizers, layers\n","from keras.engine.topology import Layer"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"oLHS9o_8S0li","executionInfo":{"status":"ok","timestamp":1623048893023,"user_tz":-540,"elapsed":5,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["class Attention(keras.layers.Layer):\n","    def __init__(self, step_dim,\n","                 W_regularizer=None, b_regularizer=None,\n","                 W_constraint=None, b_constraint=None,\n","                 bias=True, **kwargs):\n","        self.supports_masking = True\n","        self.init = initializers.get('glorot_uniform')\n","\n","        self.W_regularizer = regularizers.get(W_regularizer)\n","        self.b_regularizer = regularizers.get(b_regularizer)\n","\n","        self.W_constraint = constraints.get(W_constraint)\n","        self.b_constraint = constraints.get(b_constraint)\n","\n","        self.bias = bias\n","        self.step_dim = step_dim\n","        self.features_dim = 0\n","        super(Attention, self).__init__(**kwargs)\n","\n","    def get_config(self):\n","        config = super().get_config().copy()\n","        config.update({\n","          'W_regularizer': self.W_regularizer,\n","          'b_regularizer': self.b_regularizer,\n","          'W_constraint': self.W_constraint,\n","          'b_constraint': self.b_constraint,\n","          'bias': self.bias\n","        })\n","        return config\n","\n","      \n","    def build(self, input_shape):\n","        assert len(input_shape) == 3\n","\n","        self.W = self.add_weight(shape=(input_shape[-1],),\n","                                 initializer=self.init,\n","                                 name='{}_W'.format(self.name),\n","                                 regularizer=self.W_regularizer,\n","                                 constraint=self.W_constraint)\n","        self.features_dim = input_shape[-1]\n","\n","        if self.bias:\n","            self.b = self.add_weight(shape=(input_shape[1],),\n","                                     initializer='zero',\n","                                     name='{}_b'.format(self.name),\n","                                     regularizer=self.b_regularizer,\n","                                     constraint=self.b_constraint)\n","        else:\n","            self.b = None\n","\n","        self.built = True\n","\n","    def compute_mask(self, input, input_mask=None):\n","        return None\n","\n","    def call(self, x, mask=None):\n","        features_dim = self.features_dim\n","        step_dim = self.step_dim\n","\n","        eij = K.reshape(K.dot(K.reshape(x, (-1, features_dim)),\n","                        K.reshape(self.W, (features_dim, 1))), (-1, step_dim))\n","\n","        if self.bias:\n","            eij += self.b\n","\n","        eij = K.tanh(eij)\n","\n","        a = K.exp(eij)\n","\n","        if mask is not None:\n","            a *= K.cast(mask, K.floatx())\n","\n","        a /= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n","\n","        a = K.expand_dims(a)\n","        weighted_input = x * a\n","        return K.sum(weighted_input, axis=1)\n","\n","    def compute_output_shape(self, input_shape):\n","        return input_shape[0],  self.features_dim"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eJGsHA_rS0l7"},"source":["### 3-2. 모델 구현 함수"]},{"cell_type":"code","metadata":{"id":"bzQsvlBarsBM","executionInfo":{"status":"ok","timestamp":1623048893024,"user_tz":-540,"elapsed":6,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["def make_model(maxlen, vocab_size):\n","\n","    embed_dim = 32  # Embedding size for each token\n","\n","    inputs = layers.Input(shape=(maxlen,))\n","    x = layers.Embedding(vocab_size, embed_dim)(inputs)\n","    x = Attention(maxlen)(x)\n","    \n","    #x = layers.GlobalAveragePooling1D()(x)\n","    x = layers.Dropout(0.1)(x)\n","    x = layers.Dense(16, activation=\"relu\")(x)\n","    x = layers.Dropout(0.1)(x)\n","    outputs = layers.Dense(2, activation=\"softmax\")(x)\n","    \n","    return keras.Model(inputs=inputs, outputs=outputs)"],"execution_count":15,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"w7n8UJllstOF"},"source":["### 3-3. 모델 실행 함수"]},{"cell_type":"code","metadata":{"id":"UxnQtEIYroLT","executionInfo":{"status":"ok","timestamp":1623048893024,"user_tz":-540,"elapsed":5,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["def model_run(model, x_train, y_train, checkpoint_path, optimizer=\"adam\"):\n","  epochs = 500\n","  batch_size = 16\n","\n","  callbacks = [\n","    tf.keras.callbacks.ModelCheckpoint(\n","        checkpoint_path, save_weights_only=True, verbose=1, save_best_only=True\n","    ),\n","    tf.keras.callbacks.ReduceLROnPlateau(\n","        monitor=\"val_loss\", factor=0.5, patience=20, min_lr=0.0001, mode='min'\n","    ),\n","    tf.keras.callbacks.EarlyStopping(monitor=\"val_loss\", patience=30, verbose=1),\n","  ]\n","  model.compile(\n","    optimizer=optimizer,\n","    loss=\"sparse_categorical_crossentropy\",\n","    metrics=[\"sparse_categorical_accuracy\"],\n","  )\n","  history = model.fit(\n","    x_train,\n","    y_train,\n","    batch_size=batch_size,\n","    epochs=epochs,\n","    callbacks=callbacks,\n","    validation_split=0.2,\n","    verbose=1,\n","  )"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rZonnT6gS0mC"},"source":["### 3-4. 모델 학습"]},{"cell_type":"code","metadata":{"id":"ZcqTeHWStH17","executionInfo":{"status":"ok","timestamp":1623048907280,"user_tz":-540,"elapsed":443,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["# 모델 저장 경로\n","model_dir = data_dir+\"model_att_v3/\"\n","if not os.path.exists(model_dir):\n","    os.mkdir(model_dir)\n","\n","# 체크포인트 파일 저장 경로\n","checkpoint_path = model_dir+\"checkpoints_model_att_v3.ckpt\""],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_cDbiZoBsQlk","executionInfo":{"status":"ok","timestamp":1623048907919,"user_tz":-540,"elapsed":4,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"f150e736-7e10-4b33-b53e-34ba91c27f8b"},"source":["model = make_model(maxlen, vocab_size)\n","print(model.summary())"],"execution_count":20,"outputs":[{"output_type":"stream","text":["Model: \"model_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_2 (InputLayer)         [(None, 200)]             0         \n","_________________________________________________________________\n","embedding_1 (Embedding)      (None, 200, 32)           640000    \n","_________________________________________________________________\n","attention_1 (Attention)      (None, 32)                232       \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 32)                0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 16)                528       \n","_________________________________________________________________\n","dropout_3 (Dropout)          (None, 16)                0         \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 2)                 34        \n","=================================================================\n","Total params: 640,794\n","Trainable params: 640,794\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mzZux5_lteba","executionInfo":{"status":"ok","timestamp":1623049784419,"user_tz":-540,"elapsed":874274,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"ff32892f-2a1c-4d88-8f5e-3cf1fffa827b"},"source":["model_run(model, x_train, y_train, checkpoint_path, optimizer=\"adam\")"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Epoch 1/500\n","2512/2512 [==============================] - 29s 10ms/step - loss: 0.3190 - sparse_categorical_accuracy: 0.8588 - val_loss: 0.3178 - val_sparse_categorical_accuracy: 0.8624\n","\n","Epoch 00001: val_loss improved from inf to 0.31780, saving model to /content/drive/My Drive/Capstone2/model_att_v3/checkpoints_model_att_v3.ckpt\n","Epoch 2/500\n","2512/2512 [==============================] - 25s 10ms/step - loss: 0.2205 - sparse_categorical_accuracy: 0.9094 - val_loss: 0.3463 - val_sparse_categorical_accuracy: 0.8389\n","\n","Epoch 00002: val_loss did not improve from 0.31780\n","Epoch 3/500\n","2512/2512 [==============================] - 26s 10ms/step - loss: 0.1998 - sparse_categorical_accuracy: 0.9168 - val_loss: 0.2983 - val_sparse_categorical_accuracy: 0.8597\n","\n","Epoch 00003: val_loss improved from 0.31780 to 0.29828, saving model to /content/drive/My Drive/Capstone2/model_att_v3/checkpoints_model_att_v3.ckpt\n","Epoch 4/500\n","2512/2512 [==============================] - 24s 10ms/step - loss: 0.1855 - sparse_categorical_accuracy: 0.9233 - val_loss: 0.3288 - val_sparse_categorical_accuracy: 0.8468\n","\n","Epoch 00004: val_loss did not improve from 0.29828\n","Epoch 5/500\n","2512/2512 [==============================] - 24s 10ms/step - loss: 0.1753 - sparse_categorical_accuracy: 0.9265 - val_loss: 0.2548 - val_sparse_categorical_accuracy: 0.8757\n","\n","Epoch 00005: val_loss improved from 0.29828 to 0.25483, saving model to /content/drive/My Drive/Capstone2/model_att_v3/checkpoints_model_att_v3.ckpt\n","Epoch 6/500\n","2512/2512 [==============================] - 26s 10ms/step - loss: 0.1655 - sparse_categorical_accuracy: 0.9296 - val_loss: 0.3877 - val_sparse_categorical_accuracy: 0.8292\n","\n","Epoch 00006: val_loss did not improve from 0.25483\n","Epoch 7/500\n","2512/2512 [==============================] - 26s 10ms/step - loss: 0.1571 - sparse_categorical_accuracy: 0.9313 - val_loss: 0.3147 - val_sparse_categorical_accuracy: 0.8611\n","\n","Epoch 00007: val_loss did not improve from 0.25483\n","Epoch 8/500\n","2512/2512 [==============================] - 25s 10ms/step - loss: 0.1497 - sparse_categorical_accuracy: 0.9333 - val_loss: 0.3967 - val_sparse_categorical_accuracy: 0.8311\n","\n","Epoch 00008: val_loss did not improve from 0.25483\n","Epoch 9/500\n","2512/2512 [==============================] - 25s 10ms/step - loss: 0.1421 - sparse_categorical_accuracy: 0.9377 - val_loss: 0.3909 - val_sparse_categorical_accuracy: 0.8426\n","\n","Epoch 00009: val_loss did not improve from 0.25483\n","Epoch 10/500\n","2512/2512 [==============================] - 25s 10ms/step - loss: 0.1357 - sparse_categorical_accuracy: 0.9401 - val_loss: 0.3348 - val_sparse_categorical_accuracy: 0.8760\n","\n","Epoch 00010: val_loss did not improve from 0.25483\n","Epoch 11/500\n","2512/2512 [==============================] - 24s 10ms/step - loss: 0.1304 - sparse_categorical_accuracy: 0.9422 - val_loss: 0.4353 - val_sparse_categorical_accuracy: 0.8264\n","\n","Epoch 00011: val_loss did not improve from 0.25483\n","Epoch 12/500\n","2512/2512 [==============================] - 25s 10ms/step - loss: 0.1248 - sparse_categorical_accuracy: 0.9460 - val_loss: 0.3981 - val_sparse_categorical_accuracy: 0.8708\n","\n","Epoch 00012: val_loss did not improve from 0.25483\n","Epoch 13/500\n","2512/2512 [==============================] - 24s 9ms/step - loss: 0.1207 - sparse_categorical_accuracy: 0.9466 - val_loss: 0.4016 - val_sparse_categorical_accuracy: 0.8649\n","\n","Epoch 00013: val_loss did not improve from 0.25483\n","Epoch 14/500\n","2512/2512 [==============================] - 24s 10ms/step - loss: 0.1153 - sparse_categorical_accuracy: 0.9500 - val_loss: 0.4839 - val_sparse_categorical_accuracy: 0.8644\n","\n","Epoch 00014: val_loss did not improve from 0.25483\n","Epoch 15/500\n","2512/2512 [==============================] - 25s 10ms/step - loss: 0.1116 - sparse_categorical_accuracy: 0.9516 - val_loss: 0.5547 - val_sparse_categorical_accuracy: 0.7942\n","\n","Epoch 00015: val_loss did not improve from 0.25483\n","Epoch 16/500\n","2512/2512 [==============================] - 26s 10ms/step - loss: 0.1093 - sparse_categorical_accuracy: 0.9530 - val_loss: 0.5440 - val_sparse_categorical_accuracy: 0.8488\n","\n","Epoch 00016: val_loss did not improve from 0.25483\n","Epoch 17/500\n","2512/2512 [==============================] - 25s 10ms/step - loss: 0.1032 - sparse_categorical_accuracy: 0.9552 - val_loss: 0.6082 - val_sparse_categorical_accuracy: 0.8368\n","\n","Epoch 00017: val_loss did not improve from 0.25483\n","Epoch 18/500\n","2512/2512 [==============================] - 25s 10ms/step - loss: 0.1010 - sparse_categorical_accuracy: 0.9579 - val_loss: 0.4788 - val_sparse_categorical_accuracy: 0.8628\n","\n","Epoch 00018: val_loss did not improve from 0.25483\n","Epoch 19/500\n","2512/2512 [==============================] - 26s 10ms/step - loss: 0.0971 - sparse_categorical_accuracy: 0.9591 - val_loss: 0.5646 - val_sparse_categorical_accuracy: 0.8480\n","\n","Epoch 00019: val_loss did not improve from 0.25483\n","Epoch 20/500\n","2512/2512 [==============================] - 24s 10ms/step - loss: 0.0935 - sparse_categorical_accuracy: 0.9600 - val_loss: 0.5545 - val_sparse_categorical_accuracy: 0.8397\n","\n","Epoch 00020: val_loss did not improve from 0.25483\n","Epoch 21/500\n","2512/2512 [==============================] - 24s 10ms/step - loss: 0.0916 - sparse_categorical_accuracy: 0.9614 - val_loss: 0.6293 - val_sparse_categorical_accuracy: 0.8479\n","\n","Epoch 00021: val_loss did not improve from 0.25483\n","Epoch 22/500\n","2512/2512 [==============================] - 24s 10ms/step - loss: 0.0872 - sparse_categorical_accuracy: 0.9630 - val_loss: 0.6370 - val_sparse_categorical_accuracy: 0.8553\n","\n","Epoch 00022: val_loss did not improve from 0.25483\n","Epoch 23/500\n","2512/2512 [==============================] - 24s 10ms/step - loss: 0.0861 - sparse_categorical_accuracy: 0.9645 - val_loss: 0.7227 - val_sparse_categorical_accuracy: 0.8277\n","\n","Epoch 00023: val_loss did not improve from 0.25483\n","Epoch 24/500\n","2512/2512 [==============================] - 25s 10ms/step - loss: 0.0840 - sparse_categorical_accuracy: 0.9645 - val_loss: 0.6966 - val_sparse_categorical_accuracy: 0.8376\n","\n","Epoch 00024: val_loss did not improve from 0.25483\n","Epoch 25/500\n","2512/2512 [==============================] - 24s 9ms/step - loss: 0.0811 - sparse_categorical_accuracy: 0.9659 - val_loss: 0.7966 - val_sparse_categorical_accuracy: 0.8153\n","\n","Epoch 00025: val_loss did not improve from 0.25483\n","Epoch 26/500\n","2512/2512 [==============================] - 25s 10ms/step - loss: 0.0717 - sparse_categorical_accuracy: 0.9706 - val_loss: 0.7057 - val_sparse_categorical_accuracy: 0.8509\n","\n","Epoch 00026: val_loss did not improve from 0.25483\n","Epoch 27/500\n","2512/2512 [==============================] - 26s 10ms/step - loss: 0.0683 - sparse_categorical_accuracy: 0.9725 - val_loss: 0.7972 - val_sparse_categorical_accuracy: 0.8329\n","\n","Epoch 00027: val_loss did not improve from 0.25483\n","Epoch 28/500\n","2512/2512 [==============================] - 24s 10ms/step - loss: 0.0675 - sparse_categorical_accuracy: 0.9732 - val_loss: 0.8086 - val_sparse_categorical_accuracy: 0.8527\n","\n","Epoch 00028: val_loss did not improve from 0.25483\n","Epoch 29/500\n","2512/2512 [==============================] - 25s 10ms/step - loss: 0.0668 - sparse_categorical_accuracy: 0.9740 - val_loss: 1.0065 - val_sparse_categorical_accuracy: 0.8232\n","\n","Epoch 00029: val_loss did not improve from 0.25483\n","Epoch 30/500\n","2512/2512 [==============================] - 24s 10ms/step - loss: 0.0659 - sparse_categorical_accuracy: 0.9737 - val_loss: 0.8972 - val_sparse_categorical_accuracy: 0.8331\n","\n","Epoch 00030: val_loss did not improve from 0.25483\n","Epoch 31/500\n","2512/2512 [==============================] - 24s 10ms/step - loss: 0.0647 - sparse_categorical_accuracy: 0.9739 - val_loss: 0.8606 - val_sparse_categorical_accuracy: 0.8379\n","\n","Epoch 00031: val_loss did not improve from 0.25483\n","Epoch 32/500\n","2512/2512 [==============================] - 26s 10ms/step - loss: 0.0638 - sparse_categorical_accuracy: 0.9746 - val_loss: 0.9236 - val_sparse_categorical_accuracy: 0.8342\n","\n","Epoch 00032: val_loss did not improve from 0.25483\n","Epoch 33/500\n","2512/2512 [==============================] - 26s 10ms/step - loss: 0.0615 - sparse_categorical_accuracy: 0.9761 - val_loss: 0.8992 - val_sparse_categorical_accuracy: 0.8500\n","\n","Epoch 00033: val_loss did not improve from 0.25483\n","Epoch 34/500\n","2512/2512 [==============================] - 24s 10ms/step - loss: 0.0615 - sparse_categorical_accuracy: 0.9759 - val_loss: 0.9296 - val_sparse_categorical_accuracy: 0.8444\n","\n","Epoch 00034: val_loss did not improve from 0.25483\n","Epoch 35/500\n","2512/2512 [==============================] - 25s 10ms/step - loss: 0.0603 - sparse_categorical_accuracy: 0.9761 - val_loss: 0.9993 - val_sparse_categorical_accuracy: 0.8390\n","\n","Epoch 00035: val_loss did not improve from 0.25483\n","Epoch 00035: early stopping\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kLSd33Uht2gz","executionInfo":{"status":"ok","timestamp":1623049784421,"user_tz":-540,"elapsed":18,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":[""],"execution_count":21,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4TWnsFfHubMG"},"source":["## 4. 성능 평가"]},{"cell_type":"markdown","metadata":{"id":"JZNCS5UdueGz"},"source":["### 4-1. 성능 평가 함수"]},{"cell_type":"code","metadata":{"id":"vTngDIakuiPr","executionInfo":{"status":"ok","timestamp":1623049784422,"user_tz":-540,"elapsed":14,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["def evalution(x_test, y_test, model):\n","\n","  data_pre = model.predict(x_test)\n","  # print(data_pre)\n","\n","  test_loss, test_acc = model.evaluate(x_test, y_test)\n","\n","  print(\"Test accuracy\", test_acc)\n","  print(\"Test loss\", test_loss)"],"execution_count":22,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3iLHzEOGvA4G"},"source":["### 4-2. 모델 로드"]},{"cell_type":"code","metadata":{"id":"AsyiYEe9uvNa","executionInfo":{"status":"ok","timestamp":1623049784422,"user_tz":-540,"elapsed":12,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["model = make_model(maxlen, vocab_size)\n","model.load_weights(checkpoint_path)\n","model.compile(\n","    optimizer=\"adam\",\n","    loss=\"sparse_categorical_crossentropy\",\n","    metrics=[\"sparse_categorical_accuracy\"],\n",")"],"execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vz6v7oZjvD-S"},"source":["### 4-3. 모델 성능 평가"]},{"cell_type":"code","metadata":{"id":"vJmVFBd4S_wH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623049785692,"user_tz":-540,"elapsed":1281,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"ba67b2eb-2588-437e-be06-f380b5be6cdb"},"source":["evalution(x_test, y_test, model)"],"execution_count":24,"outputs":[{"output_type":"stream","text":["156/156 [==============================] - 1s 3ms/step - loss: 0.1503 - sparse_categorical_accuracy: 0.9431\n","Test accuracy 0.9431041479110718\n","Test loss 0.15030109882354736\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kVSMwOa6jfri"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RmircjxHjxRA"},"source":[""],"execution_count":null,"outputs":[]}]}