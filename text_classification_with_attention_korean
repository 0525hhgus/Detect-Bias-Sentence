{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"text_classification_with_attention_korean","provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/nlp/ipynb/text_classification_with_transformer.ipynb","timestamp":1622697288061}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"GM2k21JTS0k7"},"source":["# Text classification with Attention\n","- 비윤리적 문장 탐지 어탠션 모델\n","- 컴퓨터공학종합프로젝트2\n","- 전남대학교 컴퓨터정보통신공학 182571 윤현서"]},{"cell_type":"markdown","metadata":{"id":"CJdMqun-S0lb"},"source":["## 1. 환경설정"]},{"cell_type":"markdown","metadata":{"id":"111qU4uQoLJb"},"source":["### 1-1. 라이브러리"]},{"cell_type":"code","metadata":{"id":"gqUout1vWJAQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622707878682,"user_tz":-540,"elapsed":3102,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"7681b6cc-8616-4fbb-bcd7-950aba1d8c46"},"source":["!pip install sentencepiece"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting sentencepiece\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f5/99/e0808cb947ba10f575839c43e8fafc9cc44e4a7a2c8f79c60db48220a577/sentencepiece-0.1.95-cp37-cp37m-manylinux2014_x86_64.whl (1.2MB)\n","\r\u001b[K     |▎                               | 10kB 24.3MB/s eta 0:00:01\r\u001b[K     |▌                               | 20kB 30.4MB/s eta 0:00:01\r\u001b[K     |▉                               | 30kB 22.9MB/s eta 0:00:01\r\u001b[K     |█                               | 40kB 17.2MB/s eta 0:00:01\r\u001b[K     |█▍                              | 51kB 9.0MB/s eta 0:00:01\r\u001b[K     |█▋                              | 61kB 9.4MB/s eta 0:00:01\r\u001b[K     |██                              | 71kB 9.5MB/s eta 0:00:01\r\u001b[K     |██▏                             | 81kB 10.4MB/s eta 0:00:01\r\u001b[K     |██▌                             | 92kB 10.7MB/s eta 0:00:01\r\u001b[K     |██▊                             | 102kB 8.7MB/s eta 0:00:01\r\u001b[K     |███                             | 112kB 8.7MB/s eta 0:00:01\r\u001b[K     |███▎                            | 122kB 8.7MB/s eta 0:00:01\r\u001b[K     |███▌                            | 133kB 8.7MB/s eta 0:00:01\r\u001b[K     |███▉                            | 143kB 8.7MB/s eta 0:00:01\r\u001b[K     |████                            | 153kB 8.7MB/s eta 0:00:01\r\u001b[K     |████▍                           | 163kB 8.7MB/s eta 0:00:01\r\u001b[K     |████▋                           | 174kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████                           | 184kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████▏                          | 194kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████▌                          | 204kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████▊                          | 215kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████                          | 225kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████▎                         | 235kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████▌                         | 245kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 256kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████                         | 266kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████▍                        | 276kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████▋                        | 286kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████                        | 296kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████▏                       | 307kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████▍                       | 317kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████▊                       | 327kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████                       | 337kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████▎                      | 348kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████▌                      | 358kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 368kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████                      | 378kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████▍                     | 389kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████▋                     | 399kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████                     | 409kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████▏                    | 419kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████▍                    | 430kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████▊                    | 440kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████                    | 450kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████▎                   | 460kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████▌                   | 471kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████▉                   | 481kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 491kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████▍                  | 501kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████▋                  | 512kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████▉                  | 522kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████▏                 | 532kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████▍                 | 542kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████▊                 | 552kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 563kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████▎                | 573kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████▌                | 583kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████▉                | 593kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████                | 604kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████▍               | 614kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████▋               | 624kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████▉               | 634kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████▏              | 645kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████▍              | 655kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████▊              | 665kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████              | 675kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████▎             | 686kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████▌             | 696kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████▉             | 706kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 716kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 727kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████▋            | 737kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████▉            | 747kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████████▏           | 757kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 768kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████████▊           | 778kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████████           | 788kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████████▎          | 798kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████████▌          | 808kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████████▉          | 819kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 829kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████▎         | 839kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████▋         | 849kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████▉         | 860kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████▏        | 870kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████▍        | 880kB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████▊        | 890kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 901kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████▎       | 911kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████▌       | 921kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 931kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 942kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▎      | 952kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▋      | 962kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▉      | 972kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▏     | 983kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▍     | 993kB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▊     | 1.0MB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████████     | 1.0MB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▎    | 1.0MB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▌    | 1.0MB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▊    | 1.0MB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 1.1MB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▎   | 1.1MB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▋   | 1.1MB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▉   | 1.1MB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▏  | 1.1MB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▍  | 1.1MB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▊  | 1.1MB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████  | 1.1MB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▏ | 1.1MB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▌ | 1.1MB 8.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▊ | 1.2MB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 1.2MB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▎| 1.2MB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▋| 1.2MB 8.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▉| 1.2MB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 1.2MB 8.7MB/s \n","\u001b[?25hInstalling collected packages: sentencepiece\n","Successfully installed sentencepiece-0.1.95\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"p4xScYkMS0lc","executionInfo":{"status":"ok","timestamp":1622707880143,"user_tz":-540,"elapsed":1465,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","from google.colab import drive\n","import sentencepiece as spm\n","import pandas as pd\n","import numpy as np\n","import os\n","import gzip\n","import shutil"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2wkiLC1tolt8"},"source":["### 1-2. 버전 확인"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xwse5_U6okpb","executionInfo":{"status":"ok","timestamp":1622707884875,"user_tz":-540,"elapsed":4736,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"30786299-653e-4c61-c9d0-228bff12e520"},"source":["print(tf.__version__)\n","print(pd.__version__)\n","print(np.__version__)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["2.5.0\n","1.1.5\n","1.19.5\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DUhZfNSnopqa"},"source":["### 1-3. GPU 확인"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kmH3Bd1lorxc","executionInfo":{"status":"ok","timestamp":1622707885089,"user_tz":-540,"elapsed":7,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"e77abbb4-9ab5-4fdc-b01f-7725a6fc5a51"},"source":["gpus = tf.config.experimental.list_physical_devices('GPU')\n","if gpus:\n","  try:\n","    # Currently, memory growth needs to be the same across GPUs\n","    for gpu in gpus:\n","      tf.config.experimental.set_memory_growth(gpu, True)\n","    logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n","    print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n","  except RuntimeError as e:\n","    # Memory growth must be set before GPUs have been initialized\n","    print(e)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["1 Physical GPUs, 1 Logical GPUs\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qDdyUu9zotYj"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HPKE3wH3o_GU"},"source":["## 2. 데이터 전처리"]},{"cell_type":"markdown","metadata":{"id":"oasRQO-IpBNO"},"source":["### 2-1. 데이터 로드"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XRqgMJ4VfWjW","executionInfo":{"status":"ok","timestamp":1622707904784,"user_tz":-540,"elapsed":19700,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"1efac6d8-e00a-4cc8-d43d-fb8f57dd8f99"},"source":["drive.mount('/content/drive')\n","# data를 저장할 폴더 입니다. 환경에 맞게 수정 하세요.\n","data_dir = \"/content/drive/My Drive/Capstone2/\""],"execution_count":5,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r2h2fT6jfgV1","executionInfo":{"status":"ok","timestamp":1622707905591,"user_tz":-540,"elapsed":811,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"0cceb2f8-7b56-4929-d7bd-6f5f44478636"},"source":["train = pd.read_csv(data_dir+\"bias_dataset_train.txt\", sep='\\t')\n","test = pd.read_csv(data_dir+\"bias_dataset_test.txt\", sep='\\t')\n","\n","print(train.shape)\n","print(test.shape)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["(11305, 2)\n","(2826, 2)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"As3ivLjXqRVT"},"source":["### 2-2. 데이터 전처리\n","- 문장 인코딩"]},{"cell_type":"code","metadata":{"id":"Ty009i93pK8s","executionInfo":{"status":"ok","timestamp":1622707905595,"user_tz":-540,"elapsed":10,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["def data_preprocessing(train, test):\n","    vocab_file = f\"{data_dir}/kowiki.model\"\n","    vocab = spm.SentencePieceProcessor()\n","    vocab.load(vocab_file)\n","\n","    '''\n","    # 데이터 인코딩 테스트\n","    lines = [\n","        \"겨울이 되어서 날씨가 무척 추워요.\",\n","        \"이번 성탄절은 화이트 크리스마스가 될까요?\",\n","        \"겨울에 감기 조심하시고 행복한 연말 되세요.\"\n","            ]\n","    for line in lines:\n","    pieces = vocab.encode_as_pieces(line)\n","    ids = vocab.encode_as_ids(line)\n","    print(line)\n","    print(pieces)\n","    print(ids)\n","    print()\n","    '''\n","\n","    x_train = train[\"comments\"]\n","    y_train = train[\"label\"]\n","    x_test = test[\"comments\"]\n","    y_test = test[\"label\"]\n","\n","    for l in range(len(x_train)):\n","        x_train[l] = vocab.encode_as_ids(x_train[l])\n","\n","    for l in range(len(x_test)):\n","        x_test[l] = vocab.encode_as_ids(x_test[l])\n","    \n","    y_train = np.asarray(y_train).astype('float32')\n","    y_test = np.asarray(y_test).astype('float32')\n","\n","    return x_train, y_train, x_test, y_test"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-c-8P6gxhIw1","executionInfo":{"status":"ok","timestamp":1622707908188,"user_tz":-540,"elapsed":2253,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"0718978b-9d96-4444-d6bd-cc614d798042"},"source":["x_train, y_train, x_test, y_test = data_preprocessing(train, test)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:28: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"HM2TASHNrFsd"},"source":["- 문장 패딩"]},{"cell_type":"code","metadata":{"id":"FFrR4Ityq-Ns","executionInfo":{"status":"ok","timestamp":1622707911184,"user_tz":-540,"elapsed":255,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["vocab_size = 20000  # Only consider the top 20k words\n","maxlen = 200  # Only consider the first 200 words of each movie review"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sv0yZDNpq-Yk","executionInfo":{"status":"ok","timestamp":1622707912886,"user_tz":-540,"elapsed":242,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"20290f6b-31ec-4aad-efb0-031033c1576f"},"source":["print(len(x_train), \"Training sequences\")\n","print(len(x_test), \"Test sequences\")\n","x_train = keras.preprocessing.sequence.pad_sequences(x_train, maxlen=maxlen)\n","x_test = keras.preprocessing.sequence.pad_sequences(x_test, maxlen=maxlen)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["11305 Training sequences\n","2826 Test sequences\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XkNIWJ6gq1zI"},"source":["## 3. 모델"]},{"cell_type":"markdown","metadata":{"id":"J-wNVBv4S0le"},"source":["### 3-1. Attention"]},{"cell_type":"code","metadata":{"id":"LG7ZZANZ0N87","executionInfo":{"status":"ok","timestamp":1622707914931,"user_tz":-540,"elapsed":224,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["from tensorflow.keras import backend as K\n","from tensorflow.keras import initializers, regularizers, constraints, optimizers, layers\n","from keras.engine.topology import Layer"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"oLHS9o_8S0li","executionInfo":{"status":"ok","timestamp":1622707916604,"user_tz":-540,"elapsed":223,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["class Attention(keras.layers.Layer):\n","    def __init__(self, step_dim,\n","                 W_regularizer=None, b_regularizer=None,\n","                 W_constraint=None, b_constraint=None,\n","                 bias=True, **kwargs):\n","        self.supports_masking = True\n","        self.init = initializers.get('glorot_uniform')\n","\n","        self.W_regularizer = regularizers.get(W_regularizer)\n","        self.b_regularizer = regularizers.get(b_regularizer)\n","\n","        self.W_constraint = constraints.get(W_constraint)\n","        self.b_constraint = constraints.get(b_constraint)\n","\n","        self.bias = bias\n","        self.step_dim = step_dim\n","        self.features_dim = 0\n","        super(Attention, self).__init__(**kwargs)\n","\n","    def get_config(self):\n","        config = super().get_config().copy()\n","        config.update({\n","          'W_regularizer': self.W_regularizer,\n","          'b_regularizer': self.b_regularizer,\n","          'W_constraint': self.W_constraint,\n","          'b_constraint': self.b_constraint,\n","          'bias': self.bias\n","        })\n","        return config\n","\n","      \n","    def build(self, input_shape):\n","        assert len(input_shape) == 3\n","\n","        self.W = self.add_weight(shape=(input_shape[-1],),\n","                                 initializer=self.init,\n","                                 name='{}_W'.format(self.name),\n","                                 regularizer=self.W_regularizer,\n","                                 constraint=self.W_constraint)\n","        self.features_dim = input_shape[-1]\n","\n","        if self.bias:\n","            self.b = self.add_weight(shape=(input_shape[1],),\n","                                     initializer='zero',\n","                                     name='{}_b'.format(self.name),\n","                                     regularizer=self.b_regularizer,\n","                                     constraint=self.b_constraint)\n","        else:\n","            self.b = None\n","\n","        self.built = True\n","\n","    def compute_mask(self, input, input_mask=None):\n","        return None\n","\n","    def call(self, x, mask=None):\n","        features_dim = self.features_dim\n","        step_dim = self.step_dim\n","\n","        eij = K.reshape(K.dot(K.reshape(x, (-1, features_dim)),\n","                        K.reshape(self.W, (features_dim, 1))), (-1, step_dim))\n","\n","        if self.bias:\n","            eij += self.b\n","\n","        eij = K.tanh(eij)\n","\n","        a = K.exp(eij)\n","\n","        if mask is not None:\n","            a *= K.cast(mask, K.floatx())\n","\n","        a /= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n","\n","        a = K.expand_dims(a)\n","        weighted_input = x * a\n","        return K.sum(weighted_input, axis=1)\n","\n","    def compute_output_shape(self, input_shape):\n","        return input_shape[0],  self.features_dim"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eJGsHA_rS0l7"},"source":["### 3-2. 모델 구현 함수"]},{"cell_type":"code","metadata":{"id":"bzQsvlBarsBM","executionInfo":{"status":"ok","timestamp":1622707955719,"user_tz":-540,"elapsed":226,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["def make_model(maxlen, vocab_size):\n","\n","    embed_dim = 32  # Embedding size for each token\n","\n","    inputs = layers.Input(shape=(maxlen,))\n","    x = layers.Embedding(vocab_size, embed_dim)(inputs)\n","    x = Attention(maxlen)(x)\n","    \n","    #x = layers.GlobalAveragePooling1D()(x)\n","    x = layers.Dropout(0.1)(x)\n","    x = layers.Dense(20, activation=\"relu\")(x)\n","    x = layers.Dropout(0.1)(x)\n","    outputs = layers.Dense(2, activation=\"softmax\")(x)\n","    \n","    return keras.Model(inputs=inputs, outputs=outputs)"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"w7n8UJllstOF"},"source":["### 3-3. 모델 실행 함수"]},{"cell_type":"code","metadata":{"id":"UxnQtEIYroLT","executionInfo":{"status":"ok","timestamp":1622707921414,"user_tz":-540,"elapsed":8,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["def model_run(model, x_train, y_train, checkpoint_path, optimizer=\"adam\"):\n","  epochs = 500\n","  batch_size = 16\n","\n","  callbacks = [\n","    tf.keras.callbacks.ModelCheckpoint(\n","        checkpoint_path, save_weights_only=True, verbose=1, save_best_only=True\n","    ),\n","    tf.keras.callbacks.ReduceLROnPlateau(\n","        monitor=\"val_loss\", factor=0.5, patience=20, min_lr=0.0001, mode='min'\n","    ),\n","    tf.keras.callbacks.EarlyStopping(monitor=\"val_loss\", patience=30, verbose=1),\n","  ]\n","  model.compile(\n","    optimizer=optimizer,\n","    loss=\"sparse_categorical_crossentropy\",\n","    metrics=[\"sparse_categorical_accuracy\"],\n","  )\n","  history = model.fit(\n","    x_train,\n","    y_train,\n","    batch_size=batch_size,\n","    epochs=epochs,\n","    callbacks=callbacks,\n","    validation_split=0.2,\n","    verbose=1,\n","  )"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rZonnT6gS0mC"},"source":["### 3-4. 모델 학습"]},{"cell_type":"code","metadata":{"id":"ZcqTeHWStH17","executionInfo":{"status":"ok","timestamp":1622707923668,"user_tz":-540,"elapsed":3,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["# 모델 저장 경로\n","model_dir = data_dir+\"model_att/\"\n","if not os.path.exists(model_dir):\n","    os.mkdir(model_dir)\n","\n","# 체크포인트 파일 저장 경로\n","checkpoint_path = model_dir+\"checkpoints_model_att.ckpt\""],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_cDbiZoBsQlk","executionInfo":{"status":"ok","timestamp":1622707960207,"user_tz":-540,"elapsed":223,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"05ec990f-f356-4b7d-ff71-c87ca1581495"},"source":["model = make_model(maxlen, vocab_size)\n","print(model.summary())"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Model: \"model\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_3 (InputLayer)         [(None, 200)]             0         \n","_________________________________________________________________\n","embedding_2 (Embedding)      (None, 200, 32)           640000    \n","_________________________________________________________________\n","attention_2 (Attention)      (None, 32)                232       \n","_________________________________________________________________\n","dropout (Dropout)            (None, 32)                0         \n","_________________________________________________________________\n","dense (Dense)                (None, 20)                660       \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 20)                0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 2)                 42        \n","=================================================================\n","Total params: 640,934\n","Trainable params: 640,934\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mzZux5_lteba","executionInfo":{"status":"ok","timestamp":1622708104231,"user_tz":-540,"elapsed":140551,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"5e2fc45e-52a8-421f-86c9-ee1d7a4ddfb8"},"source":["model_run(model, x_train, y_train, checkpoint_path, optimizer=\"adam\")"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Epoch 1/500\n","566/566 [==============================] - 8s 8ms/step - loss: 0.6396 - sparse_categorical_accuracy: 0.6288 - val_loss: 0.4941 - val_sparse_categorical_accuracy: 0.7992\n","\n","Epoch 00001: val_loss improved from inf to 0.49405, saving model to /content/drive/My Drive/Capstone2/model_att/checkpoints_model_att.ckpt\n","Epoch 2/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.5194 - sparse_categorical_accuracy: 0.7471 - val_loss: 0.3755 - val_sparse_categorical_accuracy: 0.8651\n","\n","Epoch 00002: val_loss improved from 0.49405 to 0.37546, saving model to /content/drive/My Drive/Capstone2/model_att/checkpoints_model_att.ckpt\n","Epoch 3/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.4505 - sparse_categorical_accuracy: 0.7933 - val_loss: 0.4045 - val_sparse_categorical_accuracy: 0.8271\n","\n","Epoch 00003: val_loss did not improve from 0.37546\n","Epoch 4/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.4071 - sparse_categorical_accuracy: 0.8190 - val_loss: 0.4040 - val_sparse_categorical_accuracy: 0.8187\n","\n","Epoch 00004: val_loss did not improve from 0.37546\n","Epoch 5/500\n","566/566 [==============================] - 4s 7ms/step - loss: 0.3762 - sparse_categorical_accuracy: 0.8367 - val_loss: 0.4630 - val_sparse_categorical_accuracy: 0.7820\n","\n","Epoch 00005: val_loss did not improve from 0.37546\n","Epoch 6/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.3508 - sparse_categorical_accuracy: 0.8513 - val_loss: 0.5893 - val_sparse_categorical_accuracy: 0.7192\n","\n","Epoch 00006: val_loss did not improve from 0.37546\n","Epoch 7/500\n","566/566 [==============================] - 4s 7ms/step - loss: 0.3339 - sparse_categorical_accuracy: 0.8665 - val_loss: 0.4430 - val_sparse_categorical_accuracy: 0.7935\n","\n","Epoch 00007: val_loss did not improve from 0.37546\n","Epoch 8/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.3150 - sparse_categorical_accuracy: 0.8755 - val_loss: 0.4746 - val_sparse_categorical_accuracy: 0.7837\n","\n","Epoch 00008: val_loss did not improve from 0.37546\n","Epoch 9/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.3001 - sparse_categorical_accuracy: 0.8798 - val_loss: 0.4964 - val_sparse_categorical_accuracy: 0.7855\n","\n","Epoch 00009: val_loss did not improve from 0.37546\n","Epoch 10/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.2868 - sparse_categorical_accuracy: 0.8927 - val_loss: 0.4891 - val_sparse_categorical_accuracy: 0.7886\n","\n","Epoch 00010: val_loss did not improve from 0.37546\n","Epoch 11/500\n","566/566 [==============================] - 4s 7ms/step - loss: 0.2751 - sparse_categorical_accuracy: 0.8976 - val_loss: 0.5864 - val_sparse_categorical_accuracy: 0.7590\n","\n","Epoch 00011: val_loss did not improve from 0.37546\n","Epoch 12/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.2634 - sparse_categorical_accuracy: 0.9054 - val_loss: 0.4984 - val_sparse_categorical_accuracy: 0.7917\n","\n","Epoch 00012: val_loss did not improve from 0.37546\n","Epoch 13/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.2497 - sparse_categorical_accuracy: 0.9087 - val_loss: 0.5503 - val_sparse_categorical_accuracy: 0.7784\n","\n","Epoch 00013: val_loss did not improve from 0.37546\n","Epoch 14/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.2386 - sparse_categorical_accuracy: 0.9143 - val_loss: 0.5813 - val_sparse_categorical_accuracy: 0.7700\n","\n","Epoch 00014: val_loss did not improve from 0.37546\n","Epoch 15/500\n","566/566 [==============================] - 4s 7ms/step - loss: 0.2255 - sparse_categorical_accuracy: 0.9180 - val_loss: 0.7038 - val_sparse_categorical_accuracy: 0.7209\n","\n","Epoch 00015: val_loss did not improve from 0.37546\n","Epoch 16/500\n","566/566 [==============================] - 4s 7ms/step - loss: 0.2166 - sparse_categorical_accuracy: 0.9194 - val_loss: 0.6980 - val_sparse_categorical_accuracy: 0.7289\n","\n","Epoch 00016: val_loss did not improve from 0.37546\n","Epoch 17/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.2037 - sparse_categorical_accuracy: 0.9313 - val_loss: 0.7817 - val_sparse_categorical_accuracy: 0.7218\n","\n","Epoch 00017: val_loss did not improve from 0.37546\n","Epoch 18/500\n","566/566 [==============================] - 4s 7ms/step - loss: 0.1967 - sparse_categorical_accuracy: 0.9313 - val_loss: 0.7301 - val_sparse_categorical_accuracy: 0.7368\n","\n","Epoch 00018: val_loss did not improve from 0.37546\n","Epoch 19/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.1870 - sparse_categorical_accuracy: 0.9312 - val_loss: 0.9098 - val_sparse_categorical_accuracy: 0.6767\n","\n","Epoch 00019: val_loss did not improve from 0.37546\n","Epoch 20/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.1754 - sparse_categorical_accuracy: 0.9354 - val_loss: 0.8832 - val_sparse_categorical_accuracy: 0.7068\n","\n","Epoch 00020: val_loss did not improve from 0.37546\n","Epoch 21/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.1658 - sparse_categorical_accuracy: 0.9389 - val_loss: 1.0328 - val_sparse_categorical_accuracy: 0.6847\n","\n","Epoch 00021: val_loss did not improve from 0.37546\n","Epoch 22/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.1562 - sparse_categorical_accuracy: 0.9413 - val_loss: 1.0201 - val_sparse_categorical_accuracy: 0.7090\n","\n","Epoch 00022: val_loss did not improve from 0.37546\n","Epoch 23/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.1330 - sparse_categorical_accuracy: 0.9515 - val_loss: 0.9422 - val_sparse_categorical_accuracy: 0.7395\n","\n","Epoch 00023: val_loss did not improve from 0.37546\n","Epoch 24/500\n","566/566 [==============================] - 5s 8ms/step - loss: 0.1255 - sparse_categorical_accuracy: 0.9548 - val_loss: 1.0145 - val_sparse_categorical_accuracy: 0.7355\n","\n","Epoch 00024: val_loss did not improve from 0.37546\n","Epoch 25/500\n","566/566 [==============================] - 4s 7ms/step - loss: 0.1216 - sparse_categorical_accuracy: 0.9534 - val_loss: 1.2364 - val_sparse_categorical_accuracy: 0.7019\n","\n","Epoch 00025: val_loss did not improve from 0.37546\n","Epoch 26/500\n","566/566 [==============================] - 4s 7ms/step - loss: 0.1160 - sparse_categorical_accuracy: 0.9548 - val_loss: 1.3367 - val_sparse_categorical_accuracy: 0.6855\n","\n","Epoch 00026: val_loss did not improve from 0.37546\n","Epoch 27/500\n","566/566 [==============================] - 4s 7ms/step - loss: 0.1093 - sparse_categorical_accuracy: 0.9577 - val_loss: 1.4250 - val_sparse_categorical_accuracy: 0.6776\n","\n","Epoch 00027: val_loss did not improve from 0.37546\n","Epoch 28/500\n","566/566 [==============================] - 4s 7ms/step - loss: 0.1057 - sparse_categorical_accuracy: 0.9588 - val_loss: 1.2546 - val_sparse_categorical_accuracy: 0.7187\n","\n","Epoch 00028: val_loss did not improve from 0.37546\n","Epoch 29/500\n","566/566 [==============================] - 4s 7ms/step - loss: 0.1000 - sparse_categorical_accuracy: 0.9590 - val_loss: 1.5301 - val_sparse_categorical_accuracy: 0.6904\n","\n","Epoch 00029: val_loss did not improve from 0.37546\n","Epoch 30/500\n","566/566 [==============================] - 4s 7ms/step - loss: 0.0977 - sparse_categorical_accuracy: 0.9605 - val_loss: 1.5386 - val_sparse_categorical_accuracy: 0.7041\n","\n","Epoch 00030: val_loss did not improve from 0.37546\n","Epoch 31/500\n","566/566 [==============================] - 4s 7ms/step - loss: 0.0932 - sparse_categorical_accuracy: 0.9598 - val_loss: 1.5417 - val_sparse_categorical_accuracy: 0.7147\n","\n","Epoch 00031: val_loss did not improve from 0.37546\n","Epoch 32/500\n","566/566 [==============================] - 4s 8ms/step - loss: 0.0895 - sparse_categorical_accuracy: 0.9598 - val_loss: 1.6441 - val_sparse_categorical_accuracy: 0.7015\n","\n","Epoch 00032: val_loss did not improve from 0.37546\n","Epoch 00032: early stopping\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kLSd33Uht2gz"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4TWnsFfHubMG"},"source":["## 4. 성능 평가"]},{"cell_type":"markdown","metadata":{"id":"JZNCS5UdueGz"},"source":["### 4-1. 성능 평가 함수"]},{"cell_type":"code","metadata":{"id":"vTngDIakuiPr","executionInfo":{"status":"ok","timestamp":1622708104232,"user_tz":-540,"elapsed":13,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["def evalution(x_test, y_test, model):\n","\n","  data_pre = model.predict(x_test)\n","  # print(data_pre)\n","\n","  test_loss, test_acc = model.evaluate(x_test, y_test)\n","\n","  print(\"Test accuracy\", test_acc)\n","  print(\"Test loss\", test_loss)"],"execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3iLHzEOGvA4G"},"source":["### 4-2. 모델 로드"]},{"cell_type":"code","metadata":{"id":"AsyiYEe9uvNa","executionInfo":{"status":"ok","timestamp":1622708104232,"user_tz":-540,"elapsed":8,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}}},"source":["model = make_model(maxlen, vocab_size)\n","model.load_weights(checkpoint_path)\n","model.compile(\n","    optimizer=\"adam\",\n","    loss=\"sparse_categorical_crossentropy\",\n","    metrics=[\"sparse_categorical_accuracy\"],\n",")"],"execution_count":24,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vz6v7oZjvD-S"},"source":["### 4-3. 모델 성능 평가"]},{"cell_type":"code","metadata":{"id":"vJmVFBd4S_wH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622708105382,"user_tz":-540,"elapsed":1157,"user":{"displayName":"윤현서","photoUrl":"","userId":"07510240751232710113"}},"outputId":"b5f35f75-cc27-4818-d616-3eed40c2f8e0"},"source":["evalution(x_test, y_test, model)"],"execution_count":25,"outputs":[{"output_type":"stream","text":["89/89 [==============================] - 1s 2ms/step - loss: 0.4902 - sparse_categorical_accuracy: 0.7675\n","Test accuracy 0.7675158977508545\n","Test loss 0.49017372727394104\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kVSMwOa6jfri"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RmircjxHjxRA"},"source":[""],"execution_count":null,"outputs":[]}]}